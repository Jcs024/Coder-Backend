<h2>🎮 Productos en Tiempo Real</h2>

<form id="productForm">
    <input type="text" name="title" placeholder="🎯 Título del producto" required>
    <input type="text" name="description" placeholder="📝 Descripción" required>
    <input type="number" name="price" placeholder="💰 Precio" required min="0" step="0.01">
    <input type="text" name="code" placeholder="🔖 Código único" required>
    <input type="number" name="stock" placeholder="📦 Stock disponible" required min="0">
    <input type="text" name="category" placeholder="🏷️ Categoría" required>
    <button type="submit">🚀 Agregar Producto</button>
</form>

<div id="productsList" class="products-container">
    {{#each products}}
    <div class="product-card" id="product-{{this.id}}">
        <h3>{{this.title}}</h3>
        <p>📝 {{this.description}}</p>
        <p>💰 Precio: ${{this.price}}</p>
        <p>📦 Stock: {{this.stock}} unidades</p>
        <p>🔖 Código: {{this.code}}</p>
        <p>🏷️ Categoría: {{this.category}}</p>
        <button onclick="deleteProduct({{this.id}})">🗑️ Eliminar Producto</button>
    </div>
    {{else}}
    <p>😴 No hay productos disponibles. ¡Agrega el primero!</p>
    {{/each}}
</div>

<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    const socket = io();
    
    function showAlert(title, message, icon = 'success') {
        Swal.fire({
            title: title,
            text: message,
            icon: icon,
            position: 'top-end',
            toast: true,
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            background: '#1a1a1a',
            color: 'white',
            iconColor: icon === 'success' ? '#4ade80' : '#f87171'
        });
    }

    socket.on('updateProducts', (products) => {
        console.log('Productos actualizados:', products);
        const productsList = document.getElementById('productsList');
        
        if (products && products.length > 0) {
            productsList.innerHTML = products.map(product => `
                <div class="product-card" id="product-${product.id}">
                    <h3>${product.title}</h3>
                    <p>📝 ${product.description}</p>
                    <p>💰 Precio: $${product.price}</p>
                    <p>📦 Stock: ${product.stock} unidades</p>
                    <p>🔖 Código: ${product.code}</p>
                    <p>🏷️ Categoría: ${product.category}</p>
                    <button onclick="deleteProduct(${product.id})">🗑️ Eliminar Producto</button>
                </div>
            `).join('');
        } else {
            productsList.innerHTML = '<p>😴 No hay productos disponibles. ¡Agrega el primero!</p>';
        }
    });
    
    socket.on('productSuccess', (message) => {
        showAlert('¡Éxito!', message, 'success');
    });
    
    socket.on('productError', (message) => {
        showAlert('Error', message, 'error');
    });
    
    document.getElementById('productForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const product = Object.fromEntries(formData);
        
        for (const key in product) {
            if (!product[key].trim()) {
                showAlert('Error', 'Todos los campos son obligatorios', 'error');
                return;
            }
        }
        
        if (isNaN(product.price) || parseFloat(product.price) <= 0) {
            showAlert('Error', 'El precio debe ser un número válido mayor a 0', 'error');
            return;
        }
        
        if (isNaN(product.stock) || parseInt(product.stock) < 0) {
            showAlert('Error', 'El stock debe ser un número válido mayor o igual a 0', 'error');
            return;
        }
  
        const { isConfirmed } = await Swal.fire({
            title: '¿Agregar producto?',
            text: '¿Estás seguro de que quieres agregar este producto?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Sí, agregar',
            cancelButtonText: 'Cancelar'
        });
        
        if (isConfirmed) {
            socket.emit('newProduct', product);
            e.target.reset();
        }
    });
    
    window.deleteProduct = async (id) => {
        const { isConfirmed } = await Swal.fire({
            title: '¿Eliminar producto?',
            text: 'Esta acción no se puede deshacer',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar',
            background: '#1a1a1a',
            color: 'white'
        });
        
        if (isConfirmed) {
            socket.emit('deleteProduct', id);
        }
    };
    
    socket.on('connect_error', (error) => {
        showAlert('Error de conexión', 'No se pudo conectar al servidor', 'error');
    });
    
    socket.on('disconnect', () => {
        showAlert('Desconectado', 'Se perdió la conexión con el servidor', 'warning');
    });
</script>